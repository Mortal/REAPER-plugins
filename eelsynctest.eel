// vim:set sw=2 et:
// REAPER plugin that opens a TCP socket and echoes back whatever is written on it.
// Written in the style of a desugared async function, with an explicit state machine.
// Loops in the same state use defer() to make the REAPER GUI responsive.
// State transitions to states that perform I/O use "do_gonext = 1" to avoid unnecessary defer().
// Run before starting the REAPER script: nc -Nv -lp 32570
// Or run after starting the REAPER script: nc -Nv localhost 32569
// python3 remote_showmenu.py 'My menu item'

port_connect = 32570;
port_listen = 32569;

state = 100;
conn = 0;

recv_bufsize = 0;
recv_bufoffs = 0;

function useBytes()
(
  recv_bufsize == 0 ? (
    0  // No bytes to use
  ) : recv_bufoffs == recv_bufsize ? (
    recv_bufsize = 0;
    recv_bufoffs = 0;
    #recv_buf = "";
  ) : recv_bufoffs > 0 ? (
    strcpy_from(#recv_buf, #recv_buf, recv_bufoffs);
    recv_bufsize -= recv_bufoffs;
    recv_bufoffs = 0;
  );
);

function ensureBytesOnce(n)
(
  recv_bufsize >= n ? (
    // Already got the bytes we need
    n_recv_buf = 0;
  ) : recv_bufsize == 0 ? (
    n_recv_buf = tcp_recv(conn, #recv_buf);
    n_recv_buf >= 0 ? (
      recv_bufsize = n_recv_buf;
    );
  ) : (
    n_recv_buf = tcp_recv(conn, #recv_tmp);
    n_recv_buf > 0 ? (
      strncat(#recv_buf, #recv_tmp, n_recv_buf);
      recv_bufsize += n_recv_buf;
    );
  );
);

function ensureBytes(n)
(
  while (recv_bufsize < n) (
    ensureBytesOnce(n);
    n_recv_buf <= 0 ? (
      // Modify parameter slot n in order to exit loop
      n = recv_bufsize;
    );
  )
);

function mainloop()
(
  do_gonext = 1;
  while (do_gonext) (
    do_gonext = 0;
    state == 100 ? (
      // Try once to make an outbound connection.
      conn = tcp_connect("127.0.0.1", port_connect, 0);
      conn > 0 ? (
        n_sent = tcp_send(conn, "Mav\n");
        n_sent < 0 ? (
          // Connect succeeded, but send failed - probably not a real connect.
          // Treat it the same as if the connect failed:
          // skip trying to connect and start listening instead.
          tcp_close(conn);
          state = 150;
          do_gonext = 1;
        ) : n_sent < 4 ? (
          printf("tcp_send only sent %d bytes\n", n_sent);
          state = -1;
        ) : (
          #remote_addr = "-";
          #recv_buf = "";
          recv_bufsize = 0;
          recv_bufoffs = 0;
          state = 200;
          do_gonext = 1;
        );
      ) : (
        // Connect failed (conn=0 or negative),
        // skip trying to connect and start listening instead.
        state = 150;
        do_gonext = 1;
      );
    ) : state == 150 ? (
      // Keep listening for a connection in a loop.
      conn = tcp_listen(port_listen, "", #remote_addr);
      conn < 0 ? (
        printf("tcp_listen error\n");
        state = -1;
      ) : conn > 0 ? (
        tcp_listen_end(port_listen);
        tcp_set_block(conn, 0);
        n_sent = tcp_send(conn, "Mav\n");
        n_sent < 0 ? (
          // Accept succeeded, but send failed. That's a fatal error.
          printf("%s: tcp_send after accept failed\n", #remote_addr);
          tcp_close(conn);
          state = -1;
        ) : n_sent < 4 ? (
          // Partial send - that's a fatal error.
          printf("%s: tcp_send only sent %d bytes\n", #remote_addr, n_sent);
          tcp_close(conn);
          state = -1;
        ) : (
          // The send was successful.
          #recv_buf = "";
          recv_bufsize = 0;
          recv_bufoffs = 0;
          state = 200;
          do_gonext = 1;
        );
      ) : (
        // No connection yet; keep listening.
        defer("mainloop()");
      );
    ) : state == 200 ? (
      // Connection established. Receive a message in a loop.
      useBytes();
      ensureBytes(4);
      msgsize = recv_bufsize < 4 ? 0 : str_getchar(#recv_buf, 0, 'iu');
      n_recv_buf < 0 ? (
        // Receive error, probably closed connection
        tcp_close(conn);
        state = 150;
        do_gonext = 1;
      ) : msgsize > 10000 ? (
        printf("%s: msgsize %u exceeds limit\n", #remote_addr, msgsize);
        tcp_send(conn, "bye\n", 4);
        tcp_close(conn);
        state = -1;
      ) : (
        ensureBytes(4 + msgsize);
        recv_bufsize >= 4 + msgsize ? (
          op = str_getchar(#recv_buf, 4, 'cu');
          op == 160 ? (  // OP_GFX_SHOWMENU
            // n:u32 op:u8 x:f32 y:f32 s:[rest]
            // stroffs = 13
            // strlen = msgsize - 9
            msgsize < 10 ? (
              printf("%s: msgsize %u too small for OP_GFX_SHOWMENU\n", #remote_addr, msgsize);
              tcp_send(conn, "bye\n", 4);
              tcp_close(conn);
              state = -1;
            ) : (
              gfx_x = str_getchar(#recv_buf, 5, 'f');
              gfx_y = str_getchar(#recv_buf, 9, 'f');
              s = #;
              strcpy_substr(s, #recv_buf, 13, msgsize - 9);
              r = gfx_showmenu(s);
              strcpy(s, "12345");
              str_setchar(s, 0, 161, 'cu');  // OP_GFX_SHOWMENU_REPLY
              str_setchar(s, 1, r, 'i');
              tcp_send(conn, s, 5);
              recv_bufoffs = 4 + msgsize;
              do_gonext = 1;
            )
          ) : op == 162 ? (  // OP_GFX_INIT
            // n:u32 op:u8 width:f32 height:f32 dockstate:f32 xpos:f32 ypos:f32 s:[rest]
            // stroffs = 25
            // strlen = msgsize - 21
            msgsize < 21 ? (
              printf("%s: msgsize %u too small for OP_GFX_INIT\n", #remote_addr, msgsize);
            ) : (
              width = str_getchar(#recv_buf, 5, 'f');
              height = str_getchar(#recv_buf, 9, 'f');
              dockstate = str_getchar(#recv_buf, 13, 'f');
              xpos = str_getchar(#recv_buf, 17, 'f');
              ypos = str_getchar(#recv_buf, 21, 'f');
              s = #;
              strcpy_substr(s, #recv_buf, 25, msgsize - 21);
              gfx_init(s,width,height,dockstate,xpos,ypos);
              gfx_x = 0;
              gfx_y = 0;
              gfx_printf("hello world");
            );
            recv_bufoffs = 4 + msgsize;
            do_gonext = 1;
          ) : op == 163 ? (  // OP_GFX_QUIT
            // n:u32 op:u8
            // stroffs = 25
            // strlen = msgsize - 21
            msgsize != 1 ? (
              printf("%s: msgsize %u incorrect for OP_GFX_QUIT\n", #remote_addr, msgsize);
            ) : (
              gfx_quit();
            );
            recv_bufoffs = 4 + msgsize;
            do_gonext = 1;
          ) : (
            // Just skip the unknown message
            recv_bufoffs = 4 + msgsize;
            do_gonext = 1;
          )
        ) : (
          defer("mainloop()");
        );
      )
    );
  );
);

mainloop();
